;;; denote-org-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from denote-org.el

(autoload 'denote-org-link-to-heading "denote-org" "\
Link to file and then specify a heading to extend the link to.

The resulting link has the following pattern:

[[denote:IDENTIFIER::#ORG-HEADING-CUSTOM-ID]][Description::Heading text]].

Because only Org files can have links to individual headings,
limit the list of possible files to those which include the .org
file extension (remember that Denote works with many file types,
per the user option `denote-file-type').

The user option `denote-org-store-link-to-heading'
determined whether the `org-store-link' function can save a link
to the current heading.  Such links look the same as those of
this command, though the functionality defined herein is
independent of it.

To only link to a file, use the `denote-link' command.

Also see `denote-org-backlinks-for-heading'." '(org-mode))
(function-put 'denote-org-link-to-heading 'interactive-only 't)
(autoload 'denote-org-backlinks-for-heading "denote-org" "\
Produce backlinks for the current heading.
This otherwise has the same behaviour as `denote-backlinks'---refer to
that for the details.

Also see `denote-org-link-to-heading'." t)
(autoload 'denote-org-extract-org-subtree "denote-org" "\
Create new Denote note using the current Org subtree as input.
Remove the subtree from its current file and move its contents into a
new Denote file (a subtree is a heading with all of its contents,
including subheadings).

Take the text of the subtree's top level heading and use it as the title
of the new note.

If the heading has any tags, use them as the keywords of the new note.
If the Org file has any #+filetags use them as well (Org's filetags are
inherited by the headings).  If none of these are true and the user
option `denote-prompts' includes an entry for keywords, then prompt for
keywords.  Else do not include any keywords.

If the heading has a PROPERTIES drawer, retain it for further review.

If the heading's PROPERTIES drawer includes a DATE or CREATED property,
or there exists a CLOSED statement with a timestamp value, use that to
derive the date (or date and time) of the new note (if there is only a
date, the time is taken as 00:00).  If more than one of these is
present, the order of preference is DATE, then CREATED, then CLOSED.  If
none of these is present, use the current time.  If the `denote-prompts'
includes an entry for a date, then prompt for a date at this stage (also
see `denote-date-prompt-use-org-read-date').

For the rest, consult the value of the user option `denote-prompts' in
the following scenaria:

- Optionally prompt for a subdirectory, otherwise produce the new note
  in the variable `denote-directory'.

- Optionally prompt for a file signature, otherwise do not use one.

Make the new note an Org file regardless of the value of the user option
`denote-file-type'." '(org-mode))
(autoload 'denote-org-convert-links-to-file-type "denote-org" "\
Convert denote: links to file: links in the current Org buffer.
Ignore all other link types.  Also ignore links that do not
resolve to a file in the variable `denote-directory'." '(org-mode))
(autoload 'denote-org-convert-links-to-denote-type "denote-org" "\
Convert file: links to denote: links in the current Org buffer.
Ignore all other link types.  Also ignore file: links that do not
point to a file with a Denote file name." '(org-mode))
(autoload 'denote-org-dblock-insert-links "denote-org" "\
Create Org dynamic block to insert Denote links matching REGEXP.

(fn REGEXP)" '(org-mode))
(eval-after-load 'org '(progn (org-dynamic-block-define "denote-links" 'denote-org-dblock-insert-links)))
(autoload 'org-dblock-write:denote-links "denote-org" "\
Function to update `denote-links' Org Dynamic blocks.
Used by `org-dblock-update' with PARAMS provided by the dynamic block.

(fn PARAMS)")
(autoload 'denote-org-dblock-insert-missing-links "denote-org" "\
Create Org dynamic block to insert Denote links matching REGEXP.

(fn REGEXP)" '(org-mode))
(eval-after-load 'org '(progn (org-dynamic-block-define "denote-missing-links" 'denote-org-dblock-insert-missing-links)))
(autoload 'org-dblock-write:denote-missing-links "denote-org" "\
Function to update `denote-links' Org Dynamic blocks.
Used by `org-dblock-update' with PARAMS provided by the dynamic block.

(fn PARAMS)")
(autoload 'denote-org-dblock-insert-backlinks "denote-org" "\
Create Org dynamic block to insert Denote backlinks to current file." '(org-mode))
(eval-after-load 'org '(progn (org-dynamic-block-define "denote-backlinks" 'denote-org-dblock-insert-backlinks)))
(autoload 'org-dblock-write:denote-backlinks "denote-org" "\
Function to update `denote-backlinks' Org Dynamic blocks.
Used by `org-dblock-update' with PARAMS provided by the dynamic block.

(fn PARAMS)")
(autoload 'denote-org-dblock-insert-files "denote-org" "\
Create Org dynamic block to insert Denote files matching REGEXP.
Sort the files according to SORT-BY-COMPONENT, which is a symbol
among `denote-sort-components'.

(fn REGEXP SORT-BY-COMPONENT)" '(org-mode))
(eval-after-load 'org '(progn (org-dynamic-block-define "denote-files" 'denote-org-dblock-insert-files)))
(autoload 'org-dblock-write:denote-files "denote-org" "\
Function to update `denote-files' Org Dynamic blocks.
Used by `org-dblock-update' with PARAMS provided by the dynamic block.

(fn PARAMS)")
(autoload 'denote-org-dblock-insert-files-as-headings "denote-org" "\
Create Org dynamic block to insert Denote Org files matching REGEXP.

Turn the #+title of each file into a top-level heading.  Then increment
all original headings in the file by one, so that they become
subheadings of what once was the #+title.

Use the #+filetags of each file as tags for the top-level heading (what
was the #+title).

Sort the files according to SORT-BY-COMPONENT, which is a symbol
among `denote-sort-components'.

IMPORTANT NOTE: This dynamic block only works with Org files, because it
has to assume the Org notation in order to insert each file's contents
as its own heading.

(fn REGEXP SORT-BY-COMPONENT)" '(org-mode))
(eval-after-load 'org '(progn (org-dynamic-block-define "denote-files-as-headings" 'denote-org-dblock-insert-files-as-headings)))
(autoload 'org-dblock-write:denote-files-as-headings "denote-org" "\
Function to update `denote-files' Org Dynamic blocks.
Used by `org-dblock-update' with PARAMS provided by the dynamic block.

(fn PARAMS)")
(register-definition-prefixes "denote-org" '("denote-org-"))

;;; End of scraped data

(provide 'denote-org-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; denote-org-autoloads.el ends here
